version: '3.8'

services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: rag_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_password_here}
      POSTGRES_DB: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag_network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rag_backend
    environment:
      - DB_HOST=postgres
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-your_password_here}
      - VLLM_BASE_URL=${VLLM_BASE_URL:-http://host.docker.internal:8000/v1}
      - VLLM_MODEL=${VLLM_MODEL:-Qwen/Qwen3-32B-AWQ}
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - rag_network
    volumes:
      - ./backend:/app
    restart: unless-stopped

  # Chainlit Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rag_frontend
    environment:
      - BACKEND_API_URL=http://backend:8001
      - BACKEND_ENDPOINT=/query-lc
      - DEFAULT_USER_GROUPS=executives,engineering
    ports:
      - "8002:8002"
    depends_on:
      - backend
    networks:
      - rag_network
    volumes:
      - ./frontend:/app
    restart: unless-stopped

networks:
  rag_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
